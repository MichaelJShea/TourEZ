#pragma checksum "/Users/Shea/Desktop/TourEZ/Views/Home/Dashboard.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5021333d7ac4e25335372749e856860dcffbbd13"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Dashboard), @"mvc.1.0.view", @"/Views/Home/Dashboard.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Dashboard.cshtml", typeof(AspNetCore.Views_Home_Dashboard))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/Users/Shea/Desktop/TourEZ/Views/_ViewImports.cshtml"
using TourEZ;

#line default
#line hidden
#line 2 "/Users/Shea/Desktop/TourEZ/Views/_ViewImports.cshtml"
using TourEZ.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5021333d7ac4e25335372749e856860dcffbbd13", @"/Views/Home/Dashboard.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bf93618951f8c8ed27964c10514889b319cd0c31", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Dashboard : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2812, true);
            WriteLiteral(@"<div class="" container text-white text-center"" style=""height:400px; width: 100%"">
    <div id=""map"">

    </div>
</div>
<div class=""container text-center jumbotron mt-2"">
    <div class=""container"">
        <h3 class="""">Your Events</h3><a class=""btn btn-outline-info info mb-2"" href=""/newevent"" role=""button"">Add Event</a>
    </div>
    <table class=""table table-striped"">
        <thead>
            <tr>
                <th scope=""col"">Date</th>
                <th scope=""col"">Event</th>
                <th scope=""col"">End Date</th>
                <th scope=""col"">Days Until</th>
                <th scope=""col"">Delete</th>
            </tr>
        </thead>
        <tbody id=""listevents"">
            <!-- LIST OF EVENTS GOES HERE FROM JS -->
        </tbody>
    </table>
</div>
<script>
    $(document).ready(function(){
        $.ajax({
            url: ""/dashboard/events"",
            success: function(data)
            {console.log(data);
                for(var i=0; i<data.length; i++)
                {
   ");
            WriteLiteral(@"                 $(""#listevents"").append(`<tr><td>${data[i].start}</td><td><a href=""/event/${data[i].eventId}"">${data[i].eventName}</a></td><td>${data[i].end}</td><td>Days Until</td><td><a href=""event/delete/${data[i].eventId}"" class=""btn btn-outline-primary"" role=""button"">Delete</a></td></tr>`)

                        var geocodingParams = {
                            searchText: `${data[i].location}`
                        };
                        var onResult = function(result) {
                            var locations = result.Response.View[0].Result,
                                position,
                                marker;
                                // Add a marker for each location found
                            for (i = 0;  i < locations.length; i++) {
                                position = {
                                    lat: locations[i].Location.DisplayPosition.Latitude,
                                    lng: locations[i].Location.DisplayPosition.Longitude
        ");
            WriteLiteral(@"                        };
                                marker = new H.map.Marker(position);
                                map.addObject(marker);
                             }
                        };
                        // Get an instance of the geocoding service:
                    var geocoder = platform.getGeocodingService();

                    // Call the geocode method with the geocoding parameters,
                    // the callback and an error callback function (called if a
                    // communication error occurs):
                    geocoder.geocode(geocodingParams, onResult, function(e) {
                    alert(e);
                    });

                }
            },

            
        })
    })
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
